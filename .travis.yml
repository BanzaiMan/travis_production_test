language: emacs-lisp
dist: trusty
sudo: false

script:
  - source
  - which python
  - "echo $PATH | tr : \"\\n\""
  - evm install $EVM_EMACS --use --skip
  - "echo $PATH | tr : \"\\n\""
  - evm list
  - "echo $PATH | tr : \"\\n\""
  - export CASK_EMACS="$(evm bin "$EVM_EMACS")"
  - "echo $PATH | tr : \"\\n\""
  - /usr/bin/python --version
  - /usr/bin/python -c "import sys; print('\n'.join(sys.path))"
  - /usr/bin/python -c "import os; print(os.environ['PATH'])"
  - "echo $PATH | tr : \"\\n\""
  - cask exec sh -c 'echo $PATH'
  - emacs --version
  - cask exec emacs --version
  - cask install
  - make test

env:
  matrix:
    - EVM_EMACS=emacs-24.4-travis

before_install:
  - curl -fsSkL https://gist.github.com/rejeep/ebcd57c3af83b049833b/raw > x.sh && source ./x.sh

matrix:
  include:
    # - env: FOO=bar
    # - env: FOO=baz
    #   if: branch = ruby
    # # - sudo: false
    #   dist: precise
    #   env: DIST=precise STACK=EC2
    # - sudo: required
    #   dist: precise
    #   env: DIST=precise STACK=GCE
    # - sudo: false
    #   dist: trusty
    #   env: DIST=trusty STACK=EC2
    # - sudo: required
    #   dist: trusty
    #   env: DIST=trusty STACK=GCE
    # - sudo: false
    #   dist: trusty
    #   group: edge
    #   env: DIST=trusty STACK=EC2 GROUP=edge
    # - sudo: required
    #   dist: trusty
    #   group: edge
    #   env: DIST=trusty STACK=GCE GROUP=edge
#     - os: osx

# before_deploy:
#   - |
#     function travis_internal_ruby() {
#       echo "2.3"
#     }

# deploy:
#   edge:
#     branch: ruby-2.3
#   provider: script
#   script: rvm $TRAVIS_RUBY_VERSION do ruby --version
#   on:
#     all_branches: true

notifications:
  email: false

  #  slack:
  #  rooms:
  #    - secure: "KZTfjxhkOdDDZYD2ThBILt2ShYtdEee3PudFZlQBfpxG9N470GfxnKVfOl7Odu4lN6cIupwC4S4BnehubEywSR99l60VmfhePUCTqDLYy+iR9+guTvaECdXdaau3jTKhFdu5u60ITsiw5Yb+hwAaGFO0HmQhqR9XVr/U8IGQlok="
  #  template:
  #    - "Build <%{build_url}|#%{build_number}> (<%{compare_url}|%{commit}>) of %{repository}@%{branch} by %{author} %{result} in %{duration} (elapsed time: %{elapsed_time}) subject: %{commit_subject} message: %{commit_message} foobar"
  #  on_success: always
